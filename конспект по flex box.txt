Чтобы начать использовать flexbox надо родительскому элементу задать display: flex; -- это flex container
элементы внутри контейнера - флекс блоки или флекс элементы.
При использовании flex перестают работать следующие свойства:		columns, float, clear, vertical-align.


По умолчанию элементы растягиваются на всю высоту контейнера.
У flex элементов есть коллапс марджинов , то есть марджины складываются.

Если задать блоку margin: auto; то он выровнится по вертикали и горизонтали, то есть окажется в центре.


----------------------------------------------------------------------------------------------------------------------------------



У контейнера есть две оси, главная и поперечная (всегда перпендикулярно главной). По умолчаню главная идет слева на право, а поперечная сверху вниз.

По умолчанию все элементы растягиваются на всю высоту поперечной оси и прижимаются к краю главной.

2 типа свойств:
1) применяются только к flex контейнеру
2) применяются к элементам



Свойства для контейнера.

flex-direction:      //отвечает за направление главной оси

flex-direction: row; //по умолчанию - слева - направо
flex-direction: row-reverse;  //главная ось будет идти по горизонтали справа - налево
flex-direction: column;  //главная ось будет идти по вертикали сверху - вниз
flex-direction: column-reverse; // главная ось будет идти по вертикали снизу - вверх

justify-content:      //отвечает за то, как будут распределяться блоки вдоль главной оси(прижиматься и т.д.)

justify-content: flex-start;   //по-умолчанию (прижимаются к началу главной оси)
justify-content: flex-end;  //блоки прижимаются к концу главной оси (при этом их порядок не изменяется)
justify-content: space-between;  //блоки равномерно распределяются на всю ширину главной оси, от ее начала до ее конца
justify-content: space-around;  //блоки равномерно распределяются на всю ширину главной оси, от ее начала до ее конца, НО вначале и конце										//добавляется половина отступа, который есть между блоками

justify-content: center;     //блоки размещаются по горизонтальному центру контейнера


Поперечная ось всегда будет идти сверху - вниз и слева - направо , как бы мы не меняли направление главной оси

Выравнивание элементов на поперечной оси:

align-items: stretch;     //по умолчанию (растягивание вдоль поперечной оси)
align-items: center;      //блоки становятся по центру поперечной оси (также меняется их размер)
align-items: flex-start;   
align-items: flex-end; 
align-items: baseline; 		//выравниевание блоков относительно их базовой линии


------------------------------------------------------------------------------------------


По умолчанию все flex элементы выстраиваются в одну линию. Это задается свойством flex-wrap, которое разрешает или не разрешает заводить новые ряды для элементов.
Если блоки влазят , то переносов не будет.


flex-wrap: nowrap;		//по умолчанию - новый ряд делать нельзя
flex-wrap: wrap;		//элементы выстраиваются в ряды, если не помещаются
flex-wrap: wrap-reverse; 		//ряды выстраиваются в обратном порядке, прижимаясь к концу поперечной оси.
 
 !!! Все ряды выстраиваются параллельно главной оси, а колонки соответственно перпендикулярно главной.
 По умолчанию ряды растягиваются на всю длинну поперечной оси.(Растягиваются в плане заполнения собой всего пространства от начала поперечной оси до конца).

 Растягивание рядов по поперечной оси (align-content: )

 align-content: stretch;		//по-умолчанию (растяшивается на всю ширину(высоту) поперечной оси)
 align-content: center;			//ряды становятся по центру поперечной оси(тогла элементы ужимаются и уже не растягиваются на всю ширину поп. 								   //оси)
 align-content: space-around;		//работает также как justify-content (не растягиваются на всю ширину поп. оси)
 align-content: space-between;		//работает также как justify-content (не растягиваются на всю ширину поп. оси)
 align-content: flex-start;			//прижатие рядов к началу поперечной оси
 align-content: flex-end;			//прижатие рядов к концу поперечной оси




 Свойство flex-flow явл-ся сочетанием 2 св-в: flex-direction и flex-wrap

 flex-flow: row wrap;


-------------------------------------------------------------------------------------------------------------------------------------------



Свойства flex элементов


В зависимости от того, куда направлена наша главная ось (по горизонтали или вертикали) у элементов будет меняться главный размер. (Т.е. если главная ось вертикальная, то главный размер эл-ов - это высота, т.к. она зависит от контента, и если его нет, то будет сужаться, а ширина уже высчитывается по поперечной оси; если же главная ось - горизонтальная, то главный размер - ширина)


По умолчанию, если нет переноса по рядам, и один блок имеет больше контента, то по ширине он также будет больше.
НО, т.к. контент в блоках разный, то параметры можно регулировать специальными св-ми.


flex-basis: auto (по-умолчанию)    ---ширина/высота высчитывается исходя из контента. Обозначает не ширину, а ГЛАВНЫЙ размер, который зависит от направления главной оси, т.е. если глав. ось идёт по горизонтали, то главный размер - ширина.

flex-basis: число в любых единицах изм. (но не отрицательные)

Если внутри контейнера расположено несолько элементов, и у всех стоит flex-basis, равный величине больше контейнера или такой, что все элементы не поместятся внутри, то это свойство не отработает.


Жадность элементов:

flex-grow: от 0 до бесконечности; (по умолчанию 0)		жадность элемента относительно свободного пространства. Автоматический захват свободного пространства. Это свойство относительное(т.е. можно задавать элементам flex-grow:3 и 4 или 300 и 400) и работает только если свободное пространство есть.
при flex-grow: 1; у 2-х блоков, они  будут делить всё свободое пространство на двоих.


Как высчитать:
{
flex-basis: 100px; Два блока займут 200px. Контейнер 500px. Свободного места 500-200=300px. Это свободное место элементы делят по частям. (Например 3 к 2 , тогда 1 часть будет равна 300/(3+2) =  60 px)
}


flex-shrink: от 0 до бесконечности;  (по-умолчанию 1)        // отвечает за то, сколько блок будет отдавать своего личного пространства , если 																//другому не будет хватать места. Оно также относительное.
при flex-shrink: 0; элементы растягиваются на величину, заданную в flex-basis.

flex: flex-grow flex-shrink flex-basis;								//объединяет все 3 свойства, описанные выше
flex: 1 1 300px;



----------------------------------------------------

Управление выводом


Еще одно свойство элемента, которое определяет его поведение относительно поперечной оси align-self.
align-self задается каждому элементу в отдельности.

align-self: auto; (по-умолчанию)		//Значения у свойства такие же как у align-items. C помощью него можно контролировать размер и куда 											//будет прижиматься отдельно взятый элемент



Свойство order:

Напрямую указывается в каком порядке блоки будут выводиться на нашей html странице


order: 0;    (по-умолчанию)			//Чем больше число, тем дальше будет стоять элемент. Элементы с order: 0 будут выводиться первыми. Если order одинаковый, то первым будет тот элемент, который первее в html коде

